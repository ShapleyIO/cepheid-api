// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// FeatureFlag defines model for FeatureFlag.
type FeatureFlag struct {
	Name  *string `json:"name,omitempty"`
	Value *bool   `json:"value,omitempty"`
}

// FeatureFlagWithId defines model for FeatureFlagWithId.
type FeatureFlagWithId struct {
	Id    *openapi_types.UUID `json:"id,omitempty"`
	Name  *string             `json:"name,omitempty"`
	Value *bool               `json:"value,omitempty"`
}

// CreateFeatureFlagJSONRequestBody defines body for CreateFeatureFlag for application/json ContentType.
type CreateFeatureFlagJSONRequestBody = FeatureFlag

// UpdateFeatureFlagJSONRequestBody defines body for UpdateFeatureFlag for application/json ContentType.
type UpdateFeatureFlagJSONRequestBody = FeatureFlagWithId

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateFeatureFlagWithBody request with any body
	CreateFeatureFlagWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFeatureFlag(ctx context.Context, body CreateFeatureFlagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFeatureFlagWithBody request with any body
	UpdateFeatureFlagWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFeatureFlag(ctx context.Context, body UpdateFeatureFlagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFeatureFlag request
	DeleteFeatureFlag(ctx context.Context, flagId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFeatureFlag request
	GetFeatureFlag(ctx context.Context, flagId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateFeatureFlagWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFeatureFlagRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFeatureFlag(ctx context.Context, body CreateFeatureFlagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFeatureFlagRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFeatureFlagWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFeatureFlagRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFeatureFlag(ctx context.Context, body UpdateFeatureFlagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFeatureFlagRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFeatureFlag(ctx context.Context, flagId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFeatureFlagRequest(c.Server, flagId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFeatureFlag(ctx context.Context, flagId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFeatureFlagRequest(c.Server, flagId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateFeatureFlagRequest calls the generic CreateFeatureFlag builder with application/json body
func NewCreateFeatureFlagRequest(server string, body CreateFeatureFlagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFeatureFlagRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateFeatureFlagRequestWithBody generates requests for CreateFeatureFlag with any type of body
func NewCreateFeatureFlagRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/feature_flag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateFeatureFlagRequest calls the generic UpdateFeatureFlag builder with application/json body
func NewUpdateFeatureFlagRequest(server string, body UpdateFeatureFlagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFeatureFlagRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateFeatureFlagRequestWithBody generates requests for UpdateFeatureFlag with any type of body
func NewUpdateFeatureFlagRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/feature_flag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFeatureFlagRequest generates requests for DeleteFeatureFlag
func NewDeleteFeatureFlagRequest(server string, flagId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "flagId", runtime.ParamLocationPath, flagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/feature_flag/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFeatureFlagRequest generates requests for GetFeatureFlag
func NewGetFeatureFlagRequest(server string, flagId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "flagId", runtime.ParamLocationPath, flagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/feature_flag/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateFeatureFlagWithBodyWithResponse request with any body
	CreateFeatureFlagWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFeatureFlagResponse, error)

	CreateFeatureFlagWithResponse(ctx context.Context, body CreateFeatureFlagJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFeatureFlagResponse, error)

	// UpdateFeatureFlagWithBodyWithResponse request with any body
	UpdateFeatureFlagWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFeatureFlagResponse, error)

	UpdateFeatureFlagWithResponse(ctx context.Context, body UpdateFeatureFlagJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFeatureFlagResponse, error)

	// DeleteFeatureFlagWithResponse request
	DeleteFeatureFlagWithResponse(ctx context.Context, flagId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteFeatureFlagResponse, error)

	// GetFeatureFlagWithResponse request
	GetFeatureFlagWithResponse(ctx context.Context, flagId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetFeatureFlagResponse, error)
}

type CreateFeatureFlagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureFlagWithId
}

// Status returns HTTPResponse.Status
func (r CreateFeatureFlagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFeatureFlagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFeatureFlagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureFlagWithId
}

// Status returns HTTPResponse.Status
func (r UpdateFeatureFlagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFeatureFlagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFeatureFlagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteFeatureFlagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFeatureFlagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFeatureFlagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureFlagWithId
}

// Status returns HTTPResponse.Status
func (r GetFeatureFlagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFeatureFlagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateFeatureFlagWithBodyWithResponse request with arbitrary body returning *CreateFeatureFlagResponse
func (c *ClientWithResponses) CreateFeatureFlagWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFeatureFlagResponse, error) {
	rsp, err := c.CreateFeatureFlagWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFeatureFlagResponse(rsp)
}

func (c *ClientWithResponses) CreateFeatureFlagWithResponse(ctx context.Context, body CreateFeatureFlagJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFeatureFlagResponse, error) {
	rsp, err := c.CreateFeatureFlag(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFeatureFlagResponse(rsp)
}

// UpdateFeatureFlagWithBodyWithResponse request with arbitrary body returning *UpdateFeatureFlagResponse
func (c *ClientWithResponses) UpdateFeatureFlagWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFeatureFlagResponse, error) {
	rsp, err := c.UpdateFeatureFlagWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFeatureFlagResponse(rsp)
}

func (c *ClientWithResponses) UpdateFeatureFlagWithResponse(ctx context.Context, body UpdateFeatureFlagJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFeatureFlagResponse, error) {
	rsp, err := c.UpdateFeatureFlag(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFeatureFlagResponse(rsp)
}

// DeleteFeatureFlagWithResponse request returning *DeleteFeatureFlagResponse
func (c *ClientWithResponses) DeleteFeatureFlagWithResponse(ctx context.Context, flagId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteFeatureFlagResponse, error) {
	rsp, err := c.DeleteFeatureFlag(ctx, flagId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFeatureFlagResponse(rsp)
}

// GetFeatureFlagWithResponse request returning *GetFeatureFlagResponse
func (c *ClientWithResponses) GetFeatureFlagWithResponse(ctx context.Context, flagId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetFeatureFlagResponse, error) {
	rsp, err := c.GetFeatureFlag(ctx, flagId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFeatureFlagResponse(rsp)
}

// ParseCreateFeatureFlagResponse parses an HTTP response from a CreateFeatureFlagWithResponse call
func ParseCreateFeatureFlagResponse(rsp *http.Response) (*CreateFeatureFlagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFeatureFlagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureFlagWithId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateFeatureFlagResponse parses an HTTP response from a UpdateFeatureFlagWithResponse call
func ParseUpdateFeatureFlagResponse(rsp *http.Response) (*UpdateFeatureFlagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFeatureFlagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureFlagWithId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteFeatureFlagResponse parses an HTTP response from a DeleteFeatureFlagWithResponse call
func ParseDeleteFeatureFlagResponse(rsp *http.Response) (*DeleteFeatureFlagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFeatureFlagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFeatureFlagResponse parses an HTTP response from a GetFeatureFlagWithResponse call
func ParseGetFeatureFlagResponse(rsp *http.Response) (*GetFeatureFlagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFeatureFlagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureFlagWithId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a Feature Flag
	// (POST /v1/feature_flag)
	CreateFeatureFlag(w http.ResponseWriter, r *http.Request)
	// Update a Feature Flag
	// (PUT /v1/feature_flag)
	UpdateFeatureFlag(w http.ResponseWriter, r *http.Request)
	// Deletes a Feature Flag By Id
	// (DELETE /v1/feature_flag/{flagId})
	DeleteFeatureFlag(w http.ResponseWriter, r *http.Request, flagId openapi_types.UUID)
	// Gets a Feature Flag By Id
	// (GET /v1/feature_flag/{flagId})
	GetFeatureFlag(w http.ResponseWriter, r *http.Request, flagId openapi_types.UUID)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Create a Feature Flag
// (POST /v1/feature_flag)
func (_ Unimplemented) CreateFeatureFlag(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a Feature Flag
// (PUT /v1/feature_flag)
func (_ Unimplemented) UpdateFeatureFlag(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Deletes a Feature Flag By Id
// (DELETE /v1/feature_flag/{flagId})
func (_ Unimplemented) DeleteFeatureFlag(w http.ResponseWriter, r *http.Request, flagId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Gets a Feature Flag By Id
// (GET /v1/feature_flag/{flagId})
func (_ Unimplemented) GetFeatureFlag(w http.ResponseWriter, r *http.Request, flagId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CreateFeatureFlag operation middleware
func (siw *ServerInterfaceWrapper) CreateFeatureFlag(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFeatureFlag(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateFeatureFlag operation middleware
func (siw *ServerInterfaceWrapper) UpdateFeatureFlag(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateFeatureFlag(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFeatureFlag operation middleware
func (siw *ServerInterfaceWrapper) DeleteFeatureFlag(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "flagId" -------------
	var flagId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "flagId", runtime.ParamLocationPath, chi.URLParam(r, "flagId"), &flagId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flagId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFeatureFlag(w, r, flagId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFeatureFlag operation middleware
func (siw *ServerInterfaceWrapper) GetFeatureFlag(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "flagId" -------------
	var flagId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "flagId", runtime.ParamLocationPath, chi.URLParam(r, "flagId"), &flagId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flagId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFeatureFlag(w, r, flagId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/feature_flag", wrapper.CreateFeatureFlag)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/v1/feature_flag", wrapper.UpdateFeatureFlag)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/feature_flag/{flagId}", wrapper.DeleteFeatureFlag)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/feature_flag/{flagId}", wrapper.GetFeatureFlag)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xWwW7jNhD9FWHaoyA53kMXOtXJIgujhwQNgh4KI5hII4mJRLLk0IUa6N8LUnJsWXaS",
	"Q1sEvcjycMT3+N4MyRfIVauVJMkWsheweU0thtdrQnaGrhus/F9tlCbDgsKgxJb8L3eaIAPLRsgK+hi2",
	"2LjDkUelGkIJfR/vQurxiXL2yQcQvwmu18UcSIRYqUyLDBk4JwqI57D/BJ8+Bku5M4K7Oy/DQGB1u/6F",
	"ukBFQgY1YUEGdoiAWjw8U7fnhFr4/D6Gm5XjehnoN+rPMBk6rpURfyELJa9UQbPgvWk8CrO2WZpaqxJb",
	"o26oS4RKlU9dpv4JMdhc6YFjOehYNljZzBAWkMHqUTSCu4hV9CthEY1aR15s6+mxeqYPwYXEiWAhDr0P",
	"CVkqTyFXkjFn/0otCj/rM22F/Hk/nwctyOZGaL9SyOASLUVXpGsSRbS6XUffqBRShNEYWHDj4Q4SIIYt",
	"GTt8vUgWyYWfVGmSqAVk8CVZJF8gBo1cB2XS7UU6qvNQ7ipZ2cBzyuXKEDJFOBEKwuQmOOOrc8w6bI0Y",
	"DP3hyPKlKrqdEiQDAmrdiDx8nT5ZD7PrMP/2o6ESMvgh3bdgOvZfeogQdJ6SXUXjoiK/qChXshSVG3iO",
	"jIShAjI2jnofsFpJO1TLcrH4N3iOHXyC7bVyclqAQ7O5tkXTvaE9+1LNfodp7W76GLQ7YeG9Lj5g4ZD1",
	"n1p4Xpr/mZHnHDhnZB/POjR98c910Q/+NsQ0d/pbiNsjoOiyi9bFzPAheWq4RoMtMRlPa9za/aax39gH",
	"FjMP4gM93zmV+s1pv6ZLuXN5TtaWrmm6aKBaHAs4FfmdxZ9vmopONM134g/q+J3484j4iYr+LQXPFn64",
	"bJjtTjs3OYfz4cRLJmfn2SSuzidmadqoHJtaWc6+Lr4u5uMXy5+ScJSO45tX1selcrMrBxuhCaq0KLES",
	"sjq6Xbz6f3Tp2PR/BwAA//8+GJ+3cAoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
